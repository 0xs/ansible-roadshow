- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    security_group: roadshowsecurity
    region: eu-central-1
    ami_id: ami-194cdc76
    ec2_access_key: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          30373261616634336532613361633463666536613865343737363166366434636566663438666563
          3532643738346439636637626431633764376530383738660a313332336632613934666465376535
          36363238333462636163346338303664383632343436313366313435633931323261666661656233
          3531643533353965330a306630326234316431313231656261306163653665616463656562616361
          36393865383431623462613865323062323263303835326165396366356632646537
    ec2_secret_key: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          33366662663338356533376336313239643566323139363039626538356563333933636137643634
          3132323231643666353663386661343439346237623536380a376233613939646263316330303563
          32663338656265373566623561383038323939666131346536613632353763656364366264396261
          3336316661353032630a393138366161356334633130656132636334663132636166356335393334
          30393838666433396664333535386536333665343131323135383664333962373266663734366165
          6134356334386535366465613331393065306234306461336532
  tasks:
  - name: Download Tower user data file
    get_url:
      url: https://raw.githubusercontent.com/mglantz/ansible-roadshow/master/content/tower-prep.sh
      dest: /tmp/tower-prep.sh

  - name: Download regular hosts user data file
    get_url:
      url: https://raw.githubusercontent.com/mglantz/ansible-roadshow/master/content/host-prep.sh
      dest: /tmp/host-prep.sh

  - name: Ensure a security group with correct ingress/egress rules are in place
    ec2_group:
      name: "{{ security_group }}"
      description: Security Group for webserver Servers
      region: "{{ region }}"
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

  - name: Provision the systems which are to be managed with Ansible
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: my_key
      region: "{{ region }}"
      group: "{{ security_group }}"
      instance_type: t2.micro
      image: "{{ ami_id }}"
      user_data: "{{ lookup('file', '/tmp/host-prep.sh') }}"
      wait: true
      exact_count: 3
      count_tag:
        identity: system
      instance_tags:
        identity: system
    register: ec2micro

  - name: Provision Ansible Tower
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: my_key
      region: "{{ region }}"
      group: "{{ security_group }}"
      instance_type: t2.large
      image: "{{ ami_id }}"
      user_data: "{{ lookup('file', '/tmp/tower-prep.sh') }}"
      wait: true
      exact_count: 1
      count_tag:
        identity: tower
      instance_tags:
        identity: tower
    register: ec2large

  - name: Add all instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=ec2micro
    with_items: "{{ ec2micro.tagged_instances }}"

  - name: Print IP addresses of regular systems
    debug:
      msg: "{{ groups['ec2micro'] }}"

  - name: Add all instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=ec2large
    with_items: "{{ ec2large.tagged_instances }}"

  - name: Print IP address of Ansible Tower server
    debug:
      msg: "{{ groups['ec2large'] }}"
